<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[「代码整洁之道」读书笔记]]></title>
    <url>%2F2019%2F07%2F10%2F%E3%80%8C%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8D%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[命名 避免误导，避免使用accountList来指一组账号，除非它真的是List类型 使用读得出来的名称，避免使用不便于阅读或理解的缩写词 名称长短应与其作用域大小相对应，长名称胜过短名称，便于检索 避免使用无意义的前后缀 明确是王道 函数 函数应该短小，20行封顶最佳 函数应该只做一件事，只做同一抽象层上的步骤 函数要么做一件事，要么回答一个问题，不要同时做这两个事 参数应该尽量少，参数太多时应该把几个参数抽象成对象 消除时序性耦合，避免产生副作用 避免使用输出参数，可以修改所属对象的状态 把try和catch代码块抽离形成函数，避免把正常流程和错误处理放在一起 错误处理就是一件事，处理错误的函数不该做其他事，try/catch代码块前后不该有其他内容 消除重复（怎么做？） 注释 注释不能美化糟糕的代码 对意图的注释，对特殊代码的注释，有助于理解 避免喃喃自语，避免循轨式注释和日志式注释 及时删除注释掉的代码 对象和数据结构 使用数据结构（过程式代码）便于在不改动既有数据结构前提下添加新函数，使用面向对象代码便于在既有函数的前提下添加新类 避免连串调用 数据传送对象（DTO） 错误处理 使用异常，不要使用返回错误码的方式 不要返回和传递null 边界 将第三方API包装起来，以此来把第三方API的边界接口与程序的其他部分隔离开来 类 类应该短小 类应该只有一个权责——只有一条加以修改的理由 味道 G2，函数或类应该实现其他程序员有理由期待的行为 G7，基类不应该依赖于派生类 G18，静态方法应该不在任何特定对象上操作，从参数中获得全部数据，还要确保没机会让它有多态行为 G23，用多态替代if/else或switch/case G25，用命名常量代替数字或字符串 G28，应该将布尔逻辑抽离，形成单独的函数 G31，如果有时序耦合，应该排列函数参数，强调他们被调用的次次序 J3，使用枚举类代替常量]]></content>
      <categories>
        <category>代码规范</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
</search>
